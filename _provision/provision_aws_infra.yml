#############################################################################
# Author: Ryan Clements, Red Hat Inc.
# Email: rclement@redhat.com
# Date: March 29/2023
#############################################################################
---
- name: Provision AWS infrastructure [No EC2]
  hosts: localhost
  vars_files:
    - ../secrets/aws_secrets.yml
    - ../settings/settings-general.yml
    - ../settings/settings-aws.yml
  vars:
    # USE --> settings.yml <-- to configure custom variables
    # DO NOT TOUCH anything below as there isn't really anything
    # hardcoded below that you'll need or want or should change
    aws_ref: &aws_ref
      aws_access_key: "{{ my_aws_access_key }}" # extra_vars override from AAP
      aws_secret_key: "{{ my_aws_secret_key }}" # extra_vars override from AAP
      region: "{{ aws.region[0].name }}" # extra_vars override from AAP Credential

    use_personal_ip_for_sg: "{{ use_personal_ip_for_sg | default(true) }}"

###  Main tasks ###

  tasks:

    # If aws or region isn't defined, just error out
    - name: Check for aws and region objects
      ansible.builtin.assert:
        that:
          - aws is defined
          - aws.region is defined

    # Should we use the personal IP of the operator to secure ingress
    # on the security groups? ../settings/settings-aws.yml
    # returns: personal_ip_info.ip
    - name: Use personal IP for SGs?
      when: use_personal_ip_for_sg | default(true)
      ansible.builtin.include_role:
        name: ../roles/personal_ip_info # noqa role-name[path]

    # Sets the _use_alternative_ip_for_sgs boolean fact.
    #
    # If true:
    #   - It will configure [_address_my_ip_for_sgs] to use the script
    #     operator's IP.
    #
    # If false:
    #   - Then [_address_my_ip_for_sgs] will use the fact from
    #     [alternative_security_ip] if it's set.
    #
    # The logic works like this:
    #
    # If [use_personal_ip_for_sg] is [false] and
    #    [alternative_security_ip] is defined and
    #    [alternative_security_ip] is a valid network address
    #
    # Then:
    #
    #    use [alternative_security_ip] instead of the personal IP address
    #    returned in personal_ip_info.ip by the personal_ip_info role above.
    - name: Check if alternative_security_ip should be used
      ansible.builtin.set_fact:
        _use_alternative_ip_for_sgs: "{{
            (not use_personal_ip_for_sg | default(true)) and
            (alternative_security_ip is defined) and
            (alternative_security_ip is ansible.utils.ipv4)
          }}"
    # Now set the IP depending on the above logic
    - name: Set IP address to use for _MY_IP_ replacements in security groups
      ansible.builtin.set_fact:
        _address_my_ip_for_sgs: "{{
            _use_alternative_ip_for_sgs |
            ternary(alternative_security_ip, personal_ip_info.ip)
          }}"

    - name: Write IP that will be used as _MY_IP_ in SGs to debug logs
      ansible.builtin.debug:
        msg: >
          Provisioner will use {{ _address_my_ip_for_sgs }} to replace any
          _MY_IP_ tags in the security groups.

    - name: Set region fact
      ansible.builtin.set_fact:
        _region: "{{ aws.region[0] }}"
      when: aws.region | default(omit) is defined

    - name: Create VPC
      delegate_to: localhost
      when: _region.vpc | default(omit) is defined
      block:
        - name: Set _vpc
          ansible.builtin.set_fact:
            _vpc: "{{ _region.vpc }}"

        - name: Create VPC
          when: _region.vpc | default(omit) is defined
          amazon.aws.ec2_vpc_net:
            name: "{{ _vpc.name }}"
            cidr_block: "{{ _vpc.cidr_block | default(omit) }}"
            tenancy: "{{ _vpc.tenancy | default(omit) }}"
            tags: "{{ _vpc.tags | default(omit) }}"
            <<: *aws_ref
          register: _vpc_result

        - name: Set _vpc_id
          ansible.builtin.set_fact:
            _vpc_id: "{{ _vpc_result.vpc.id }}"

        - name: Create VPC subnets for VPC
          delegate_to: localhost
          when: _vpc.subnet | default(omit) is defined
          block:
            - name: Set _subnet
              ansible.builtin.set_fact:
                _subnet: "{{ _vpc.subnet[0] | default(omit) }}"

            - name: Create subnet for VPC
              amazon.aws.ec2_vpc_subnet:
                state: present
                vpc_id: "{{ _vpc_id }}"
                cidr: "{{ _subnet.cidr }}"
                tags: "{{ _subnet.tags | default(omit) }}"
                <<: *aws_ref
              register: _subnet_result

            - name: Set _subnet_id
              ansible.builtin.set_fact:
                _subnet_id: "{{ _subnet_result.subnet.id }}"

            - name: Set _rtb
              ansible.builtin.set_fact:
                _rtb: "{{ _subnet.rtb[0] | default(omit) }}"

            - name: Enter route table object
              when: _rtb | default(omit) is defined
              block:
                - name: Set _igw
                  ansible.builtin.set_fact:
                    _igw: "{{ _rtb.igw | default(omit) }}"

                - name: Create internet gateway
                  delegate_to: localhost
                  when: _rtb.igw | default(omit) is defined
                  amazon.aws.ec2_vpc_igw:
                    vpc_id: "{{ _vpc_id }}"
                    state: present
                    tags: "{{ _igw.tags }}"
                    <<: *aws_ref
                  register: _igw_result

                - name: Set internet_gateway_id fact
                  ansible.builtin.set_fact:
                    _igw_id: "{{ _igw_result.gateway_id }}"

                # - name: Create route table for subnet
                #   delegate_to: localhost
                #   when: _rtb | default(omit) is defined
                #   block:
                #     - name: Create route table  # noqa args[module]
                #       amazon.aws.ec2_vpc_route_table:
                #         vpc_id: "{{ _vpc_id }}"
                #         subnets: "{{ _rtb.subnets | default(omit) }}"
                #         routes: "{{ _rtb.routes | default([]) }}"
                #         gateway_id: "{{ _igw_id | default(omit) }}"
                #         tags: "{{ _rtb.tags | default(omit) }}"
                #         <<: *aws_ref
                #       register: _rtb_result

                - name: Set _sg
                  ansible.builtin.set_fact:
                    _sg: "{{ _subnet.sg[0] | default(omit) }}"

                # This crazy ball of Jinja2 filters takes the rule list of the
                # security group and replaces any cidr_ip keys that have a value
                # of _MY_IP_.
                #
                # The original rule list looks something like this:
                #
                # "_sg": {
                #     "description": "Internal security group",
                #     "ec2": null,
                #     "name": "internal",
                #     "rules": [
                #         {
                #             "cidr_ip": "_MY_IP_",
                #             "ports": 22,
                #             "proto": "tcp"
                #         },
                #         {
                #             "cidr_ip": "1.1.1.1/32",
                #             "ports": 443,
                #             "proto": "tcp"
                #         }
                #      ],
                #
                # To replace _MY_IP_, this is what happens:
                #
                # - loops over each as an _sg.rule as an item
                # - The combine filter creates a new dictoinary { } with
                #   cidr_ip: item.cidr_ip, but it runs a replace on anything
                #   that contains _MY_IP_ in the cidr_ip value and replaces it
                #   with the personal ip of the user.
                # - Lastly it adds the list encapsulating the dict to the _rules
                #   dict before moving on to the next rule.
                #
                # I weirdly spaced it below because it's important to see how it
                # all goes together.
                #
                # - The [ ]'s start a new list, which can be added with +
                # - The { }'s start a new dict, which use combine
                #
                # Why does Ansible need to be so difficult for simple string
                # manipulation?
                #
                - name: Parse routes
                  ansible.builtin.set_fact: # noqa jinja[spacing]
                    __p__rules: "{{ [
                                      item | default({}) |
                                      combine( [{ 'cidr_ip': item.cidr_ip |
                                      replace('_MY_IP_',
                                        _address_my_ip_for_sgs) }] )
                                    ]
                        + __p__rules | default([])
                      }}"

                  with_items: "{{ _sg.rules }}"

                # After all that mess, the end result is this:
                #
                #     "rules": [
                #         {
                #             "cidr_ip": "Whatever value is in personal_ip_info.ip/32",
                #             "ports": 22,
                #             "proto": "tcp"
                #         },
                #         {
                #             "cidr_ip": "1.1.1.1/32",
                #             "ports": 443,
                #             "proto": "tcp"
                #         }
                #      ],

                - name: Create security groups
                  when: _sg | default(omit) is defined
                  delegate_to: localhost
                  block:
                    - name: Create security group for submit # noqa args[module]
                      amazon.aws.ec2_security_group:
                        name: "{{ _sg.name }}"
                        description: "{{ _sg.description }}"
                        vpc_id: "{{ _vpc_id }}"
                        # get that new parsed list in the rules
                        rules: "{{ __p__rules }}"
                        tags: "{{ _sg.tags }}"
                        <<: *aws_ref
                      register: _sg_result
                    - name: Set _sg_id fact
                      ansible.builtin.set_fact:
                        _sg_id: "{{ _sg_result.group_id }}"
