---
# OK
- name: Provision AWS infrastructure and EC2 webservers
  hosts: localhost
  vars_files:
    - ../secrets/aws_secrets.yml
    - ../settings/settings-general.yml
    - ../settings/settings-aws.yml # All non-account specific configurable settings
  vars:
    # USE --> settings.yml <-- to configure custom variables
    # DO NOT TOUCH anything below as there isn't really anything
    # hardcoded below that you'll need or want or should change
    aws_ref: &aws_ref
      aws_access_key: "{{ my_aws_access_key }}" # extra_vars override from AAP
      aws_secret_key: "{{ my_aws_secret_key }}" # extra_vars override from AAP
      region: "{{ demo_region }}" # extra_vars override from AAP Credential

###  Main tasks ###

  tasks:
    - name: Create VPC if does not exist
      when: aws_preexisting_vpc_id is not defined
      delegate_to: localhost
      block:
        - name: Create VPC
          amazon.aws.ec2_vpc_net:
            name: "{{ demo_name }}"
            cidr_block: "{{ aws.vpc.cidr_block }}"
            tenancy: dedicated
            tags: "{{ aws.vpc.tags }}"
            <<: *aws_ref
          register: vpc_result
        - name: Set vpc_id
          ansible.builtin.set_fact:
            vpc_id: "{{ vpc_result.vpc.id }}"

    - name: Create internal subnet if does not exist
      when: aws_preexisting_subnet_internal_id is not defined
      delegate_to: localhost
      block:
        - name: Create internal subnet for VPC
          amazon.aws.ec2_vpc_subnet:
            state: present
            vpc_id: "{{ vpc_id }}"
            cidr: "{{ aws.subnets.internal.network_cidr }}"
            tags: "{{ aws.subnets.internal.tags }}"
            <<: *aws_ref
          register: subnet_result
        - name: Set int_subnet_id
          ansible.builtin.set_fact:
            int_subnet_id: "{{ subnet_result.subnet.id }}"

    - name: Create external subnet if does not exist
      when: aws_preexisting_subnet_external_id is not defined
      delegate_to: localhost
      block:
        - name: Create external subnet for VPC
          amazon.aws.ec2_vpc_subnet:
            state: present
            vpc_id: "{{ vpc_id }}"
            cidr: "{{ aws.subnets.external.network_cidr }}"
            tags: "{{ aws.subnets.external.tags }}"
            <<: *aws_ref
          register: subnet_result
        - name: Set ext_subnet_id
          ansible.builtin.set_fact:
            ext_subnet_id: "{{ subnet_result.subnet.id }}"

    - name: Create management subnet if does not exist
      when: aws_preexisting_subnet_management_id is not defined
      delegate_to: localhost
      block:
        - name: Create management subnet for VPC
          amazon.aws.ec2_vpc_subnet:
            state: present
            vpc_id: "{{ vpc_id }}"
            cidr: "{{ aws.subnets.management.network_cidr }}"
            tags: "{{ aws.subnets.management.tags }}"
            <<: *aws_ref
          register: subnet_result
        - name: Set mgmt_subnet_id
          ansible.builtin.set_fact:
            mgmt_subnet_id: "{{ subnet_result.subnet.id }}"

    - name: Create sg for management subnet if does not exist
      when: aws_preexisting_sg_management_id is not defined
      delegate_to: localhost
      block:
        - name: Create sg for management subnet # noqa args[module]
          amazon.aws.ec2_security_group:
            name: "{{ aws.security_groups.management.tags.Name }}"
            description: "{{ demo_name }} {{ management_string }} sg"
            vpc_id: "{{ vpc_id }}"
            rules: "{{ aws.security_groups.management.rules }}"
            tags: "{{ aws.security_groups.management.tags }}"
            <<: *aws_ref
          register: sg_result
        - name: Set mgmt_sg_id fact
          ansible.builtin.set_fact:
            mgmt_sg_id: "{{ sg_result.group_id }}"

    - name: Create sg for internal subnet if does not exist
      when: aws_preexisting_sg_internal_id is not defined
      delegate_to: localhost
      block:
        - name: Create sg for internal subnet # noqa args[module]
          amazon.aws.ec2_security_group:
            name: "{{ aws.security_groups.internal.tags.Name }}"
            description: "{{ demo_name }} {{ internal_string }} sg"
            vpc_id: "{{ vpc_id }}"
            rules: "{{ aws.security_groups.internal.rules }}"
            tags: "{{ aws.security_groups.internal.tags }}"
            <<: *aws_ref
          register: sg_result
        - name: Set int_sg_id fact
          ansible.builtin.set_fact:
            int_sg_id: "{{ sg_result.group_id }}"

    - name: Create internet gateway if does not exist
      when: aws_preexisting_internet_gateway_id is not defined
      delegate_to: localhost
      block:
        - name: Create internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpc_id }}"
            state: present
            tags: "{{ aws.igw.tags }}"
            <<: *aws_ref
          register: igw_result
        - name: Set internet_gateway_id fact
          ansible.builtin.set_fact:
            internet_gateway_id: "{{ igw_result.gateway_id }}"

    - name: Create route table if does not exist
      when: aws_preexisting_route_table_id is not defined
      delegate_to: localhost
      block:
        - name: Create route table  # noqa args[module]
          amazon.aws.ec2_vpc_route_table:
            vpc_id: "{{ vpc_id }}"
            subnets:
              - "{{ mgmt_subnet_id }}"
              - "{{ int_subnet_id }}"
              - "{{ ext_subnet_id }}"
            routes: "{{ aws.route_table.routes }}"
            gateway_id: "{{ internet_gateway_id }}"
            tags: "{{ aws.route_table.tags }}"
            <<: *aws_ref
          register: rt_result
